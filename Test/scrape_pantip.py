import csv
import re
import time
from datetime import datetime, timedelta

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup

# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô parse ‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤
# ------------------------------
def parse_relative_time(text: str):
    """
    ‡πÄ‡∏ä‡πà‡∏ô "3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß", "15 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
    ‡∏Ñ‡∏∑‡∏ô datetime.now() - timedelta(...) ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    """
    text = text.replace("\xa0", " ").replace("\r", "").strip()

    unit_map = {
        "‡∏ô‡∏≤‡∏ó‡∏µ": "minutes", "‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß": "minutes",
        "‡∏ä‡∏°.": "hours", "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á": "hours",
        "‡∏ß‡∏±‡∏ô": "days", "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ": "seconds",
        "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß": "seconds"
    }
    pattern = r"(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏°\.|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|‡∏ß‡∏±‡∏ô|‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)(‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß|‡∏Å‡πà‡∏≠‡∏ô)?"
    m = re.search(pattern, text)
    if not m:
        return None

    try:
        amount = int(m.group(1))
        if amount > 999999:
            return None
    except:
        return None

    now = datetime.now()
    unit_thai = m.group(2)
    time_unit = unit_map.get(unit_thai)
    if not time_unit:
        return None

    return now - timedelta(**{time_unit: amount})

def parse_full_thai_datetime(text: str):
    """
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
      - "5 ‡πÄ‡∏°.‡∏¢." / "5 ‡πÄ‡∏°‡∏¢" / "6 ‡πÄ‡∏°.‡∏¢" 
      - "6 ‡πÄ‡∏°.‡∏¢. 2566", "6 ‡πÄ‡∏°.‡∏¢. 66 (‡∏õ‡∏µ 2 ‡∏´‡∏•‡∏±‡∏Å)"
      - optional ‡πÄ‡∏ß‡∏•‡∏≤ "‡πÄ‡∏ß‡∏•‡∏≤ 12:30 ‡∏ô."
    """
    text = text.replace("\xa0"," ").replace("\r","").strip()

    # 1) normalize month
    def normalize_month(m_str: str):
        # ‡∏ä‡πà‡∏ß‡∏¢ fix ‡πÄ‡∏Ñ‡∏™‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏°‡∏¢", "‡πÄ‡∏°.‡∏¢", "‡πÄ‡∏°.‡∏¢." 
        # ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡πÄ‡∏°.‡∏¢." ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏õ dict
        m_str = m_str.strip()
        alias = {
            "‡πÄ‡∏°‡∏¢": "‡πÄ‡∏°.‡∏¢.",
            "‡πÄ‡∏°‡∏¢.": "‡πÄ‡∏°.‡∏¢.",
            "‡πÄ‡∏°.‡∏¢": "‡πÄ‡∏°.‡∏¢.",
            "‡πÄ‡∏°.‡∏¢.": "‡πÄ‡∏°.‡∏¢."  # ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ "‡πÄ‡∏°.‡∏¢."
        }
        return alias.get(m_str, m_str)

    # dict ‡πÑ‡∏ó‡∏¢ -> month
    thai_months = {
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": 1, "‡∏°.‡∏Ñ.": 1,
        "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": 2, "‡∏Å.‡∏û.": 2,
        "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": 3, "‡∏°‡∏µ.‡∏Ñ.": 3,
        "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": 4, "‡πÄ‡∏°.‡∏¢.": 4,
        "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": 5, "‡∏û.‡∏Ñ.": 5,
        "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": 6, "‡∏°‡∏¥.‡∏¢.": 6,
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": 7, "‡∏Å.‡∏Ñ.": 7,
        "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": 8, "‡∏™.‡∏Ñ.": 8,
        "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": 9, "‡∏Å.‡∏¢.": 9,
        "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": 10, "‡∏ï.‡∏Ñ.": 10,
        "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": 11, "‡∏û.‡∏¢.": 11,
        "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": 12, "‡∏ò.‡∏Ñ.": 12
    }

    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏µ => ex. "6 ‡πÄ‡∏°.‡∏¢. 2566" ‡∏´‡∏£‡∏∑‡∏≠ "6 ‡πÄ‡∏°.‡∏¢. 66"
    pattern_full = r"(\d{1,2})\s+([‡∏Å-‡∏Æ.]+)\s+(\d{2,4})\s*(?:‡πÄ‡∏ß‡∏•‡∏≤\s*(\d{1,2}):(\d{1,2})\s*‡∏ô\.)?"
    m = re.search(pattern_full, text)
    if m:
        try:
            day_str = m.group(1)
            raw_month = normalize_month(m.group(2))
            year_str = m.group(3)
            hour_str = m.group(4)
            minute_str = m.group(5)

            day = int(day_str)

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            month = thai_months.get(raw_month)
            if not month:
                return None

            # ‡∏ñ‡πâ‡∏≤ len(year_str)=2 => ‡∏ö‡∏ß‡∏Å 2500
            if len(year_str) == 2:
                year_thai = 2500 + int(year_str)
            else:
                year_thai = int(year_str)

            year = year_thai - 543
            hour = int(hour_str) if hour_str else 0
            minute = int(minute_str) if minute_str else 0
            return datetime(year, month, day, hour, minute)
        except:
            return None

    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ => "6 ‡πÄ‡∏°.‡∏¢.", "6 ‡πÄ‡∏°‡∏¢", "6 ‡πÄ‡∏°.‡∏¢"
    pattern_no_year = r"(\d{1,2})\s+([‡∏Å-‡∏Æ.]+)"
    m = re.search(pattern_no_year, text)
    if m:
        try:
            day_str = m.group(1)
            raw_month = normalize_month(m.group(2))
            month = thai_months.get(raw_month)
            if not month:
                return None
            now = datetime.now()
            # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            year = now.year
            hour = now.hour
            minute = now.minute
            return datetime(year, month, int(day_str), hour, minute)
        except:
            return None

    return None

def parse_thai_datetime(text: str):
    """
    ‡∏£‡∏ß‡∏° parse_relative_time ‡∏Å‡∏±‡∏ö parse_full_thai_datetime
    """
    dt = parse_relative_time(text)
    if dt:
        return dt
    dt = parse_full_thai_datetime(text)
    return dt

def format_datetime(dt: datetime):
    if not dt:
        return "N/A"
    return dt.strftime("%Y-%m-%d %H:%M:%S")

def is_within_days(dt, max_days=5):
    if not dt:
        return False
    return (datetime.now() - dt).days <= max_days

# ---------------------------
# ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
# ---------------------------
MAX_DAYS = 5
SCROLL_STEP_PX = 300
WAIT_SCROLL = 2.5  
MAX_SCROLLS = 15   # scroll ‡∏´‡∏ô‡πâ‡∏≤ tag
MAX_SCROLLS_POST = 10 # scroll ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ

chrome_options = Options()
chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
chrome_options.add_argument('--log-level=3')
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

try:
    # 1) ‡πÄ‡∏Ç‡πâ‡∏≤ TAG '‡∏´‡∏∏‡πâ‡∏ô'
    driver.get("https://pantip.com/tag/%E0%B8%AB%E0%B8%B8%E0%B9%89%E0%B8%99")
    time.sleep(3)

    print(f"üîΩ Scroll page up to {MAX_SCROLLS} times ...")
    last_height = driver.execute_script("return document.body.scrollHeight")
    scroll_count = 0
    while scroll_count < MAX_SCROLLS:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(WAIT_SCROLL)
        new_height = driver.execute_script("return document.body.scrollHeight")
        if new_height == last_height:
            break
        last_height = new_height
        scroll_count += 1

    soup = BeautifulSoup(driver.page_source, "html.parser")
    container = soup.select_one("div.container div.col-lg-8")
    all_post_links = []
    if container:
        posts = container.select("li.pt-list-item")
        print(f"üîé ‡∏û‡∏ö {len(posts)} posts (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô)")
        for p in posts:
            link_tag = p.select_one("div.pt-list-item__title a")
            date_tag = p.select_one("div.pt-list-item__info > span")
            if link_tag and date_tag:
                href = link_tag.get("href")
                date_str = date_tag.get_text(strip=True)
                dt_obj = parse_thai_datetime(date_str)

                # Debug
                print(f"üïì date_str='{date_str}' => {dt_obj}")

                if dt_obj and is_within_days(dt_obj, MAX_DAYS):
                    full_url = href if href.startswith("http") else ("https://pantip.com" + href)
                    all_post_links.append(full_url)
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ container ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤")

    print(f"‚úÖ ‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {MAX_DAYS} ‡∏ß‡∏±‡∏ô: {len(all_post_links)} ‡∏•‡∏¥‡∏á‡∏Å‡πå")

    if not all_post_links:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    else:
        with open("pantip_data_5days.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["post_id","type","day","datetime","title","content","author","raw_date"])

            # 2) ‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå => scroll ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô => ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for link in all_post_links:
                driver.get(link)
                time.sleep(2)

                # scroll ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
                post_scroll_count = 0
                last_h = driver.execute_script("return document.body.scrollHeight")
                while post_scroll_count < MAX_SCROLLS_POST:
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    time.sleep(1.5)
                    new_h = driver.execute_script("return document.body.scrollHeight")
                    if new_h == last_h:
                        break
                    last_h = new_h
                    post_scroll_count += 1

                post_soup = BeautifulSoup(driver.page_source, "html.parser")

                # ---- ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å ----
                title_tag = post_soup.select_one("title")
                title = title_tag.get_text(strip=True) if title_tag else "N/A"

                post_dt_div = post_soup.select_one("div.display-post-status-leftside")
                dt_str = post_dt_div.get_text(strip=True) if post_dt_div else ""
                post_dt_obj = parse_thai_datetime(dt_str)
                day_str = post_dt_obj.strftime('%Y-%m-%d') if post_dt_obj else "N/A"
                final_dt_str = format_datetime(post_dt_obj)

                author_tag = post_soup.select_one(".display-post-name")
                author = author_tag.get_text(strip=True) if author_tag else "Unknown"

                writer.writerow([link, "post", day_str, final_dt_str, title, "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å", author, dt_str])

                # ---- ‡∏î‡∏∂‡∏á comment ----
                comment_blocks = post_soup.select("div[id^='comment-']")
                print(f"üó®Ô∏è {link} => ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå {len(comment_blocks)} ‡∏≠‡∏±‡∏ô")
                for c in comment_blocks:
                    # ‡πÄ‡∏ß‡∏•‡∏≤
                    time_div = c.select_one("div.display-post-status-leftside")
                    comment_time_str = time_div.get_text(strip=True) if time_div else ""
                    c_dt_obj = parse_thai_datetime(comment_time_str)
                    c_day = c_dt_obj.strftime('%Y-%m-%d') if c_dt_obj else "N/A"
                    c_final_dt = format_datetime(c_dt_obj)

                    content_div = c.select_one("div.display-post-message")
                    comment_text = content_div.get_text(strip=True) if content_div else "N/A"

                    c_author_tag = c.select_one(".display-post-name")
                    c_author = c_author_tag.get_text(strip=True) if c_author_tag else "Unknown"

                    writer.writerow([link, "comment", c_day, c_final_dt, title, comment_text, c_author, comment_time_str])

        print("\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå 'pantip_data_5days.csv'")

finally:
    driver.quit()
    print("‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
