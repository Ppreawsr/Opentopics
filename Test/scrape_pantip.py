import csv
import re
import time
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup

# ------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì datetime ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πà‡∏ô "20 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß", "3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß", "1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô" ‡∏Ø‡∏•‡∏Ø
# ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞ return None
# ------------------------
def parse_relative_time(text: str):
    """
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà Pantip ‡∏≠‡∏≤‡∏à‡πÅ‡∏™‡∏î‡∏á:
    - "20 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
    - "3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
    - "1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô"
    - "19 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
    """
    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡πÄ‡∏Å‡∏¥‡∏ô
    text = text.strip()

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° mapping ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ -> timedelta
    unit_map = {
        "‡∏ô‡∏≤‡∏ó‡∏µ": "minutes",
        "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á": "hours",
        "‡∏ß‡∏±‡∏ô": "days"
    }

    # ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) + (‡∏´‡∏ô‡πà‡∏ß‡∏¢) + "‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Å‡πà‡∏≠‡∏ô"
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|‡∏ß‡∏±‡∏ô).*"  => group(1)=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô, group(2)=‡∏´‡∏ô‡πà‡∏ß‡∏¢
    pattern = r"(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|‡∏ß‡∏±‡∏ô)(‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß|‡∏Å‡πà‡∏≠‡∏ô)?"
    match = re.search(pattern, text)
    if not match:
        return None  # parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

    number_str = match.group(1)
    unit_thai = match.group(2)

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
    try:
        amount = int(number_str)
    except:
        return None

    # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏ô
    if unit_thai not in unit_map:
        return None

    now = datetime.now()
    if unit_map[unit_thai] == "minutes":
        real_time = now - timedelta(minutes=amount)
    elif unit_map[unit_thai] == "hours":
        real_time = now - timedelta(hours=amount)
    elif unit_map[unit_thai] == "days":
        real_time = now - timedelta(days=amount)
    else:
        return None

    return real_time

# ------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á datetime -> string ‡∏™‡∏ß‡∏¢ ‡πÜ
# ------------------------
def format_datetime(dt: datetime):
    if not dt:
        return "N/A"
    return dt.strftime("%Y-%m-%d %H:%M:%S")

# ------------------------
# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å
# ------------------------
# ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏Å "‡∏´‡∏∏‡πâ‡∏ô"
MAX_POSTS = 20

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Selenium WebDriver
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

try:
    # 1) ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ tag "‡∏´‡∏∏‡πâ‡∏ô"
    main_url = "https://pantip.com/tag/‡∏´‡∏∏‡πâ‡∏ô"
    driver.get(main_url)
    time.sleep(5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    # ‡∏î‡∏∂‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å
    main_html = driver.page_source
    soup = BeautifulSoup(main_html, "html.parser")

    # ‡∏´‡∏≤ container ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå
    container = soup.select_one("#__next > div > div > div > div.container > div:nth-child(6) > div.col-lg-8")
    if not container:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö container ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ tag '‡∏´‡∏∏‡πâ‡∏ô'")
        driver.quit()
        exit()

    # 2) ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å container
    posts = container.select("li.pt-list-item")[:MAX_POSTS]
    print(f"üîé ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(posts)} ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ tag '‡∏´‡∏∏‡πâ‡∏ô'")

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå CSV
    with open("pantip_data_hun.csv", "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ, ‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á, ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤]
        # type = "post" ‡∏´‡∏£‡∏∑‡∏≠ "comment"
        # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ post, "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠
        # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ comment, "‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡πÉ‡∏™‡πà "-" ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ
        writer.writerow(["type", "title", "datetime", "content"])

        # 3) ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
        for idx, post in enumerate(posts, start=1):
            # ‡∏î‡∏∂‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå
            title_tag = post.select_one("div.pt-list-item__title a")
            if not title_tag:
                continue
            title = title_tag.get_text(strip=True)
            link = title_tag.get("href")

            print(f"\n‚ú® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà {idx}/{len(posts)}: {title}")
            driver.get(link)
            time.sleep(5)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÇ‡∏´‡∏•‡∏î

            post_html = driver.page_source
            soup_post = BeautifulSoup(post_html, "html.parser")

            # === (A) ‡∏î‡∏∂‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤" ‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "19 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß" ‡∏à‡∏∞ parse)
            date_tag = soup_post.select_one("div.display-post-status-leftside")
            dt_string = date_tag.get_text(strip=True) if date_tag else ""
            real_dt = parse_relative_time(dt_string)  # ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞‡πÑ‡∏î‡πâ datetime, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô None
            real_dt_str = format_datetime(real_dt)

            # === (B) ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å
            post_content_tag = soup_post.select_one("div.display-post-story")
            post_content = post_content_tag.get_text(separator=" ", strip=True) if post_content_tag else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ"

            # 4) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å row ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "post"
            writer.writerow(["post", title, real_dt_str, post_content])

            # === (C) ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            comments_wrappers = soup_post.select("div.display-post-wrapper.section-comment")
            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
            for comment in comments_wrappers:
                # 4.1 ‡∏î‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ comment
                # ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô div.display-post-story-wrapper.comment-wrapper > div.display-post-story
                c_story_tag = comment.select_one("div.display-post-story")
                c_content = c_story_tag.get_text(separator=" ", strip=True) if c_story_tag else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå"

                # 4.2 ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤ comment (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                # ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô "div.display-post-status-leftside" ‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÇ‡∏û‡∏™‡∏ï‡πå
                c_dt_tag = comment.select_one("div.display-post-status-leftside")
                c_dt_string = c_dt_tag.get_text(strip=True) if c_dt_tag else ""
                c_real_dt = parse_relative_time(c_dt_string)
                c_real_dt_str = format_datetime(c_real_dt)

                # 4.3 ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV: type=comment
                writer.writerow(["comment", title, c_real_dt_str, c_content])

            print(f"üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ: {title}")
            print(f"üïí ‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå: {real_dt_str}")
            print(f"üìñ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ (‡∏™‡∏±‡πâ‡∏ô‡πÜ): {post_content[:80]}...")
            print(f"üí¨ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå: {len(comments_wrappers)}")

finally:
    driver.quit()
    print("\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå 'pantip_data_hun.csv'")

